(() => {
  // ---------- Helpers ----------
  const $ = sel => document.querySelector(sel);
  const norm = s => (s||'').toLowerCase().trim()
    .replace(/[.,;:!?]/g,'')
    .replace(/ß/g,'ss').replace(/ä/g,'ae').replace(/ö/g,'oe').replace(/ü/g,'ue')
    .replace(/\s+/g,' ');
  const shuffle = arr => { const a=[...arr]; for(let i=a.length-1;i>0;i--){ const j=Math.floor(Math.random()*(i+1)); [a[i],a[j]]=[a[j],a[i]]; } return a; };

  // ---------- Data (AUTOGENERATED from Excel) ----------
  const CARDS = [
    { en:'in the vicinity of', de:'in der Nähe von', sol:[
          'in der Nähe von'
        ] },
    { en:'to like (something)', de:'gefallen (etwas)', sol:[
          'gefallen (etwas)',
          'gefallen',
          'gefallen etwas'
        ] },
    { en:'to consist (of something)', de:'(aus etwas) bestehen', sol:[
          'aus etwas bestehen',
          'bestehen',
          '(aus etwas) bestehen'
        ] },
    { en:'should', de:'sollst = sollen', sol:[
          'sollst',
          'sollen'
        ] },
    { en:'must', de:'must = müssen', sol:[
          'must',
          'müssen'
        ] },
    { en:'I must inform you', de:'Ich muss Sie informieren', sol:[
          'Ich muss Sie informieren'
        ] },
    { en:'previous', de:'vorherig', sol:[
          'vorherig'
        ] },
    { en:'earliest', de:'frühestens', sol:[
          'frühestens'
        ] },
    { en:'from', de:'von', sol:[
          'von'
        ] },
    { en:'from home', de:'von zu Hause', sol:[
          'von zu Hause'
        ] },
    { en:'in conclusion', de:'abschließend', sol:[
          'abschließend'
        ] },
    { en:'to be in a hurry', de:'es eilig haben', sol:[
          'es eilig haben'
        ] },
    { en:'to be late', de:'zu spät sein', sol:[
          'zu spät sein'
        ] },
    { en:'to be afraid (of something)', de:'Angst (vor etwas) haben', sol:[
          'Angst (vor etwas) haben',
          'Angst vor etwas haben',
          'Angst haben'
        ] },
    { en:'rarely', de:'selten', sol:[
          'selten'
        ] },
    { en:'seldomly', de:'selten', sol:[
          'selten'
        ] },
    { en:'soon', de:'bald', sol:[
          'bald'
        ] },
    { en:'a little later', de:'etwas später', sol:[
          'etwas später'
        ] },
    { en:'immediately', de:'sofort', sol:[
          'sofort'
        ] },
    { en:'for this reason', de:'aus diesem Grund', sol:[
          'aus diesem Grund'
        ] },
    { en:'finally', de:'endlich', sol:[
          'endlich'
        ] },
    { en:'that depends (on ...)', de:'das hängt (davon) ab', sol:[
          'das hängt (davon) ab',
          'das hängt davon ab',
          'das hängt ab'
        ] },
    { en:'to depend on', de:'abhängen (von)', sol:[
          'abhängen (von)',
          'abhängen von',
          'abhängen'
        ] },
    { en:'to use', de:'benutzen', sol:[
          'benutzen'
        ] },
    { en:'to need', de:'brauchen', sol:[
          'brauchen'
        ] },
    { en:'to help', de:'helfen', sol:[
          'helfen'
        ] },
    { en:'to wait (for)', de:'warten (auf)', sol:[
          'warten (auf)',
          'warten auf',
          'warten'
        ] },
    { en:'to try', de:'versuchen', sol:[
          'versuchen'
        ] },
    { en:'to explain', de:'erklären', sol:[
          'erklären'
        ] },
    { en:'to learn', de:'lernen', sol:[
          'lernen'
        ] },
    { en:'to understand', de:'verstehen', sol:[
          'verstehen'
        ] },
    { en:'to ask', de:'fragen', sol:[
          'fragen'
        ] },
    { en:'to answer', de:'antworten', sol:[
          'antworten'
        ] },
    { en:'to call (telephone)', de:'anrufen', sol:[
          'anrufen'
        ] },
    { en:'to start', de:'anfangen', sol:[
          'anfangen'
        ] },
    { en:'to finish', de:'aufhören', sol:[
          'aufhören'
        ] },
    { en:'to close', de:'zumachen', sol:[
          'zumachen'
        ] },
    { en:'to open', de:'öffnen', sol:[
          'öffnen'
        ] },
    { en:'to pay attention', de:'aufpassen', sol:[
          'aufpassen'
        ] },
    { en:'to forget', de:'vergessen', sol:[
          'vergessen'
        ] },
    { en:'to remember', de:'sich erinnern', sol:[
          'sich erinnern',
          'erinnern'
        ] },
    { en:'to feel (oneself)', de:'(sich) fühlen', sol:[
          '(sich) fühlen',
          'sich fühlen',
          'fühlen'
        ] },
    { en:'to be sorry', de:'leid tun', sol:[
          'leid tun'
        ] },
    { en:'to be fun', de:'Spaß machen', sol:[
          'Spaß machen'
        ] },
    { en:'to be valid', de:'gelten', sol:[
          'gelten'
        ] },
    { en:'to be allowed to', de:'dürfen', sol:[
          'dürfen'
        ] },
    { en:'to be able to / can', de:'können', sol:[
          'können'
        ] },
    { en:'to want', de:'wollen', sol:[
          'wollen'
        ] },
    { en:'to shall / should', de:'sollen', sol:[
          'sollen'
        ] },
    { en:'to have to / must', de:'müssen', sol:[
          'müssen'
        ] },
    { en:'to may / be allowed', de:'dürfen', sol:[
          'dürfen'
        ] },
    { en:'to like / to be pleasing', de:'gefallen', sol:[
          'gefallen'
        ] },
    { en:'to love', de:'lieben', sol:[
          'lieben'
        ] },
    { en:'to hate', de:'hassen', sol:[
          'hassen'
        ] },
    { en:'to prefer', de:'bevorzugen', sol:[
          'bevorzugen'
        ] },
    { en:'to need to', de:'benötigen', sol:[
          'benötigen'
        ] },
    { en:'to try out', de:'ausprobieren', sol:[
          'ausprobieren'
        ] },
    { en:'to find', de:'finden', sol:[
          'finden'
        ] },
    { en:'to look for', de:'suchen', sol:[
          'suchen'
        ] },
    { en:'to look at', de:'anschauen', sol:[
          'anschauen'
        ] },
    { en:'to look like', de:'aussehen', sol:[
          'aussehen'
        ] },
    { en:'to seem / appear', de:'scheinen', sol:[
          'scheinen'
        ] },
    { en:'to mean', de:'meinen', sol:[
          'meinen'
        ] },
    { en:'to think', de:'denken', sol:[
          'denken'
        ] },
    { en:'to believe', de:'glauben', sol:[
          'glauben'
        ] },
    { en:'to know (a fact)', de:'wissen', sol:[
          'wissen'
        ] },
    { en:'to know (be acquainted)', de:'kennen', sol:[
          'kennen'
        ] },
    { en:'to say', de:'sagen', sol:[
          'sagen'
        ] },
    { en:'to tell', de:'erzählen', sol:[
          'erzählen'
        ] },
    { en:'to speak', de:'sprechen', sol:[
          'sprechen'
        ] },
    { en:'to discuss', de:'besprechen', sol:[
          'besprechen'
        ] },
    { en:'to read', de:'lesen', sol:[
          'lesen'
        ] },
    { en:'to write', de:'schreiben', sol:[
          'schreiben'
        ] },
    { en:'to listen', de:'zuhören', sol:[
          'zuhören'
        ] },
    { en:'to hear', de:'hören', sol:[
          'hören'
        ] },
    { en:'to watch', de:'zusehen', sol:[
          'zusehen'
        ] },
    { en:'to see', de:'sehen', sol:[
          'sehen'
        ] },
    { en:'to go', de:'gehen', sol:[
          'gehen'
        ] },
    { en:'to come', de:'kommen', sol:[
          'kommen'
        ] },
    { en:'to arrive', de:'ankommen', sol:[
          'ankommen'
        ] },
    { en:'to leave', de:'verlassen', sol:[
          'verlassen'
        ] },
    { en:'to bring', de:'bringen', sol:[
          'bringen'
        ] },
    { en:'to take', de:'nehmen', sol:[
          'nehmen'
        ] },
    { en:'to give', de:'geben', sol:[
          'geben'
        ] },
    { en:'to get / receive', de:'bekommen', sol:[
          'bekommen'
        ] },
    { en:'to keep', de:'behalten', sol:[
          'behalten'
        ] },
    { en:'to put / place', de:'stellen', sol:[
          'stellen'
        ] },
    { en:'to lay', de:'legen', sol:[
          'legen'
        ] },
    { en:'to sit (down)', de:'(sich) setzen', sol:[
          '(sich) setzen',
          'sich setzen',
          'setzen'
        ] },
    { en:'to stand', de:'stehen', sol:[
          'stehen'
        ] },
    { en:'to remain / stay', de:'bleiben', sol:[
          'bleiben'
        ] },
    { en:'to live (reside)', de:'wohnen', sol:[
          'wohnen'
        ] },
    { en:'to work', de:'arbeiten', sol:[
          'arbeiten'
        ] },
    { en:'to study', de:'studieren', sol:[
          'studieren'
        ] },
    { en:'to play', de:'spielen', sol:[
          'spielen'
        ] },
    { en:'to need (requirement/necessity)', de:'nötig haben', sol:[
          'nötig haben'
        ] },
    { en:'to do', de:'tun', sol:[
          'tun'
        ] },
    { en:'what a company does for the health of its employees', de:'was eine Firma für die Gesundheit ihrer Mitarbeiter tut', sol:[
          'was eine Firma für die Gesundheit ihrer Mitarbeiter tut'
        ] },
    { en:'to taste', de:'schmecken', sol:[
          'schmecken'
        ] },
    { en:'it tastes good', de:'Es schmeckt gut', sol:[
          'Es schmeckt gut'
        ] },
    { en:'all the time / constantly', de:'dauernd', sol:[
          'dauernd'
        ] },
    { en:'absolutely / under any circumstance', de:'unbedingt', sol:[
          'unbedingt'
        ] },
    { en:'one of', de:'eines der', sol:[
          'eines der'
        ] },
    { en:'a few / a little (quantity)', de:'wenig', sol:[
          'wenig'
        ] },
    { en:'little (description)', de:'klein', sol:[
          'klein'
        ] },
    { en:'order (rarely reserve)', de:'bestellen', sol:[
          'bestellen'
        ] },
    { en:'to open up', de:'aufmachen', sol:[
          'aufmachen'
        ] },
    { en:'clear', de:'klar', sol:[
          'klar'
        ] },
    { en:'maybe', de:'vielleicht', sol:[
          'vielleicht'
        ] },
    { en:'rich', de:'reich', sol:[
          'reich'
        ] },
  ]; // 49 items

  const STATUS_IMG = { ok:'https://i.imgur.com/RQ3mDTH.png', bad:'https://i.imgur.com/9BACXIX.png' };

  // ---------- State & Elements ----------
  let deck=[], idx=-1, answered=0, ok=0, bad=0, locked=false, awaitNext=false;
  const history=[];
  const el = {
    card: $('#card'), cardText: $('#card-text'), cardHint: $('#card-hint'),
    startBtn: $('#start-btn'), startSub: document.querySelector('.start-sub'),
    input: $('#answer-input'), submit: $('#submit-btn'), reveal: $('#reveal-btn'), skip: $('#skip-btn'),
    feedback: $('#feedback'), counter: $('#counter'), bar: $('#bar-fill'),
    bucketOk: $('#bucket-correct'), bucketBad: $('#bucket-wrong'),
    results: $('#results'), restart: $('#restart-btn'), form: $('#answer-form'),
    status: $('#status-overlay')
  };

  // ---------- UI helpers ----------
  function enableInputs(v){
    el.input.disabled = el.submit.disabled = el.reveal.disabled = el.skip.disabled = !v;
    if(v) el.input.focus();
  }
  function updateProgress(){
    const safe=Math.min(answered, CARDS.length);
    el.counter.textContent = `${safe} / ${CARDS.length}`;
    el.bar.style.width = Math.round((safe/CARDS.length)*100)+'%';
  }
  const pretty = card => card.de.split('|').join(' / ');
  function firstLetter(card){
    let variant = card.de.split('/')[0].split('|')[0].trim();
    const lower = variant.toLowerCase();
    if(lower.startsWith('der ')) variant = variant.slice(4);
    else if(lower.startsWith('die ')) variant = variant.slice(4);
    else if(lower.startsWith('das ')) variant = variant.slice(4);
    const letters = 'abcdefghijklmnopqrstuvwxyzäöüßABCDEFGHIJKLMNOPQRSTUVWXYZÄÖÜ';
    for(const ch of variant){ if(letters.indexOf(ch)!==-1) return ch.toUpperCase(); }
    return '';
  }
  function addMiniCard(to, card){
    const d = document.createElement('div'); d.className='mini';
    d.innerHTML = `<div class="en">${card.en}</div><div class="de">${card.de}</div>`;
    to.appendChild(d);
  }
  function showStatus(type){
    if(!el.status) return;
    el.status.innerHTML='';
    const img = new Image(); img.src = STATUS_IMG[type] || STATUS_IMG.ok; img.alt = type==='ok' ? 'Richtig' : 'Falsch';
    el.status.appendChild(img);
    el.status.classList.remove('show'); void el.status.offsetWidth; el.status.classList.add('show');
    setTimeout(()=>{ if(el.status){ el.status.classList.remove('show'); el.status.innerHTML=''; } }, 3000);
  }

  // ---------- Flow ----------
  function showWord(){
    const c = deck[idx];
    el.cardText.textContent = c.en;
    el.cardHint.textContent = 'Schreibe die deutsche Übersetzung (mit Artikel) und drücke ENTER';
    el.feedback.innerHTML = '';
    el.input.value='';
    awaitNext=false; 
    locked=false;

    enableInputs(true);

    if(el.status){ el.status.classList.remove('show'); el.status.innerHTML=''; }
  }
  function nextCard(){
    idx++;
    if(idx >= deck.length) return finish();
    showWord();
  }
  function showSolution(card){
    el.cardText.textContent = pretty(card);
    el.cardHint.textContent = 'Drücke ENTER für das nächste Wort';
    awaitNext = true;               // wartet auf Enter
  }
  function checkAnswer(){
    if(locked || idx < 0) return;
    locked = true;
    const userRaw = el.input.value.trim();
    const user = norm(userRaw);
    const card = deck[idx];
    const solutions = (card.sol || card.de.split('|')).map(norm);
    const correct = solutions.includes(user);

    enableInputs(false);

    if(correct){ 
      ok++; answered++; 
      el.feedback.innerHTML = '<span class="ok">✅ Richtig!</span>'; 
      addMiniCard(el.bucketOk, card); 
      showStatus('ok'); 
    } else { 
      bad++; answered++; 
      el.feedback.innerHTML = `<span class="bad">❌ Falsch. Richtige Lösung: <strong>${pretty(card)}</strong></span>`; 
      addMiniCard(el.bucketBad, card); 
      showStatus('bad'); 
    }
    history.push({en:card.en, de:card.de, input:userRaw||'—', correct});
    updateProgress();
    locked = false;

    showSolution(card);            // ENTER => nächste Karte
  }
  function renderResults(){
    const right = history.filter(h=>h.correct);
    const wrong = history.filter(h=>!h.correct);
    const table = (list,title)=>{
      const rows = list.map(h=>`<tr><td>${h.en}</td><td>${h.de}</td><td>${h.input}</td></tr>`).join('') || '<tr><td colspan="3">—</td></tr>';
      return `<div class="res-card"><h3>${title}</h3><table><thead><tr><th>EN</th><th>DE (Lösung)</th><th>Eingabe</th></tr></thead><tbody>${rows}</tbody></table></div>`;
    };
    el.results.innerHTML = table(right,'Richtig') + table(wrong,'Falsch');
    el.results.classList.add('show');
  }
  function start(){
    if(idx >= 0) return;             // bereits gestartet
    deck = shuffle(CARDS);
    idx = -1; answered=ok=bad=0; locked=false; awaitNext=false;
    history.length=0;
    el.bucketOk.innerHTML=''; el.bucketBad.innerHTML='';
    el.results.classList.remove('show'); el.results.innerHTML='';
    if(el.startBtn) el.startBtn.style.display='none';
    if(el.startSub) el.startSub.style.display='none';
    updateProgress();
    nextCard();
  }
  function finish(){
    enableInputs(false);
    el.cardText.textContent = 'Fertig!';
    el.cardHint.textContent = `Ergebnis: ${ok} ✅ · ${bad} ❌`;
    el.feedback.innerHTML = '';
    renderResults();
    el.restart.style.display = 'inline-block'; 
    awaitNext=false;
  }

  // ---------- Events ----------
  document.addEventListener('DOMContentLoaded', () => {
    el.startBtn?.addEventListener('click', start);
    el.form?.addEventListener('submit', (e)=>{
      e.preventDefault();
      awaitNext ? nextCard() : checkAnswer();
    });
    el.reveal?.addEventListener('click', ()=>{
      if(idx>=0){
        el.feedback.innerHTML = `<span class="pill">Tipp: Erster Buchstabe: <strong>${firstLetter(deck[idx])}</strong></span>`;
      }
    });
    el.skip?.addEventListener('click', ()=>{ 
      if(idx>=0){ 
        history.push({en:deck[idx].en,de:deck[idx].de,input:'(übersprungen)',correct:false}); 
        bad++; answered++; addMiniCard(el.bucketBad, deck[idx]); updateProgress(); nextCard(); 
      } 
    });
    el.restart?.addEventListener('click', ()=>{ 
      idx=-1; answered=ok=bad=0; history.length=0;
      el.cardText.textContent = 'Vokabel-Trainer';
      el.cardHint.textContent = 'Klicke auf Start, dann erscheint ein englisches Wort... tippe die deutsche Übersetzung (mit Artikel) ein und drücke Enter.';
      el.restart.style.display='none'; 
      enableInputs(false);
      el.input.value=''; el.feedback.innerHTML=''; el.results.classList.remove('show'); el.results.innerHTML='';
      if(el.startBtn) el.startBtn.style.display='inline-block';
      if(el.startSub) el.startSub.style.display='inline-block';
      updateProgress();
    });

    // Tastatur-Komfort
    document.addEventListener('keydown', (e)=>{
      if(e.key === 'Escape') el.input.blur();
      if(e.key === 'ArrowUp') el.input.focus();
      // Start per Tastatur
      if((e.key === 'Enter' || e.key.toLowerCase() === 's') && idx < 0){ e.preventDefault(); start(); }
      // Nächste Karte nach Lösung
      else if(e.key === 'Enter' && awaitNext){ e.preventDefault(); nextCard(); }
    });

    // Init
    enableInputs(false); updateProgress();
  });
})();
